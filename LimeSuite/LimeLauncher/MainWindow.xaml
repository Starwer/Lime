<Window x:Class="LimeLauncher.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        xmlns:w="clr-namespace:WPFhelper"
        xmlns:l="clr-namespace:LimeLauncher"
        xmlns:c="clr-namespace:LimeLauncher.Controls"
        Title="Lime Launcher" 
        Icon="/Resources/Lime Icon.ico" 
        ShowInTaskbar="{Binding Path=ShowInTaskbar, Source={x:Static l:Global.User}}"
        Background="Transparent" 
        IsTabStop="False"
        KeyboardNavigation.DirectionalNavigation="Contained"
        Activated="WindowRefresh" 
        Deactivated="Window_Deactivated" 
        StateChanged="Window_StateChanged" 
        SizeChanged="Window_SizeChanged"
        Loaded="Window_Loaded" 
        Closing="Window_Closing" 
        w:ClipDragDrop.Enable="True"
        w:ClipDragDrop.DragDefaultOperation="{Binding DragDefaultOperation, Source={x:Static l:Global.User}}"
        w:ClipDragDrop.FormatCancel="{l:Translate DragCancel, Section=Text}"
        w:ClipDragDrop.FormatCopy="{l:Translate DragCopy, Section=Text}"
        w:ClipDragDrop.FormatMove="{l:Translate DragMove, Section=Text}"
        w:ClipDragDrop.FormatLink="{l:Translate DragLink, Section=Text}"
        w:ClipDragDrop.FormatMenu="{l:Translate DragMenu, Section=Text}"
        w:ClipDragDrop.FormatOpen="{l:Translate DragOpen, Section=Text}"
        LocationChanged="Window_LocationChanged" 
        PreviewMouseWheel="Window_PreviewMouseWheel" 
        MouseLeftButtonDown="Window_MouseLeftButtonDown"
        PreviewKeyUp="Window_PreviewKeyUp" >

    <!-- If Fonts are not scaled used transform, apply this on window: TextOptions.TextFormattingMode="Display"  -->

    <Window.Resources>
        <ResourceDictionary>
            <!-- **************************************************************************************************************** -->
            <!-- Define value-converters -->

            <w:UniversalValueConverter x:Key="AutoConvert" />
            <l:LimeIconConverter x:Key="LimeIconConvert" />
            <BooleanToVisibilityConverter x:Key="BoolToVisible" />


            <!-- **************************************************************************************************************** -->
            <!-- Application Menu -->

            <Style x:Key="CmdMenuItemStyle" TargetType="{x:Type MenuItem}">
                
                <Style.Resources>
                    <Style TargetType="{x:Type c:LimeIcon}">
                        <Setter Property="Margin" Value="2"/>
                        <Setter Property="Width" Value="16"/>
                        <Setter Property="Height" Value="16"/>
                        <Setter Property="Foreground" Value="{x:Static SystemColors.ControlDarkDarkBrush}"/>
                        <Setter Property="Background" Value="Transparent"/>
                        <Style.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Opacity" Value="0.2"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Style.Resources>
                
                
                <Setter Property="Command" Value="{Binding Content}" />
                <Setter Property="Header" Value="{Binding Name}" />
                <Setter Property="Icon" 
                        Value="{Binding Icon, Converter={StaticResource LimeIconConvert}}"/>

                <Style.Triggers>
                    <DataTrigger Binding="{Binding}" Value="{x:Null}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate>
                                    <Separator/>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False"/>
                            <Condition Binding="{Binding IsToggle}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Visibility" Value="Collapsed" />
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>

            <ContextMenu x:Shared="false" x:Key="AppMenu" 
                         ItemsSource="{Binding AppMenu, Source={x:Static l:Global.ConfigTree}}" 
                         ItemContainerStyle="{StaticResource CmdMenuItemStyle}"  
                         MouseEnter="Menu_MouseEnter" />

            <!-- Hierarchical Menu binding: http://stackoverflow.com/questions/23941314/wpf-how-can-i-create-menu-and-submenus-using-binding -->


            <!-- **************************************************************************************************************** -->
            <!-- Tray icon -->
            <!-- Documentation: http://www.hardcodet.net/wpf-notifyicon -->

            <tb:TaskbarIcon x:Key="LimeTrayIcon"
                            IconSource="/Resources/Lime Icon.ico"
                            ToolTipText="Lime Launcher" 
                            ContextMenu="{StaticResource AppMenu}"
                            LeftClickCommand="{x:Static l:Commands.ShowHide}"/>

        </ResourceDictionary>
    </Window.Resources>
    
    <!-- **************************************************************************************************************** -->
    <!-- Main Window -->

    <Window.SnapsToDevicePixels>True</Window.SnapsToDevicePixels>
    <Window.UseLayoutRounding>True</Window.UseLayoutRounding>


    <Border x:Name="wxWinBorder" Style="{DynamicResource BackgroundStyle}" IsMouseDirectlyOverChanged="wxWinBorder_IsMouseDirectlyOverChanged" PreviewMouseLeftButtonDown="wxWinBorder_PreviewMouseLeftButtonDown">
        <Grid x:Name="wxMainGrid" Style="{DynamicResource MainGridStyle}" ContextMenu="{StaticResource AppMenu}" >
            <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="wxMainPaneColumn"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition x:Name="wxInfoPaneColumn" Width="0"/>
            </Grid.ColumnDefinitions>

            <!-- Scale rendering when TypeScaled disabled --> 
            
            <Grid.LayoutTransform>
                <ScaleTransform CenterX="0" CenterY="0" 
                                        ScaleX="{Binding TransformScale, Source={x:Static l:Global.Local}, Converter={StaticResource AutoConvert}}" 
                                        ScaleY="{Binding TransformScale, Source={x:Static l:Global.Local}, Converter={StaticResource AutoConvert}}" />
            </Grid.LayoutTransform>

            
            <GridSplitter x:Name="wxSplitter" Grid.Row="0" Grid.Column="1" 
                          Focusable="False" IsTabStop="False" DragCompleted="wxSplitter_DragCompleted"
                          Visibility="{Binding InfoPaneVisible, Source={x:Static l:Global.Local}, Converter={StaticResource BoolToVisible}}" />

            <!-- Browser Pane  -->

            <l:BrowserPanel x:Name="Browser" Grid.Column="0"/>

            <!-- Info Pane -->

            <Control x:Name="wxInfoPane" Grid.Column="2" 
                     IsTabStop="False"
                     Focusable="False"
                     Visibility="{Binding InfoPaneVisible, Source={x:Static l:Global.Local}, Converter={StaticResource BoolToVisible}}" >

                <!-- Control.Template = InfoEditMode ?  InfoEditPanel : InfoPanel -->
                <Control.Style>
                    <Style TargetType="Control">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding InfoEditMode, Source={x:Static l:Global.Local}}" Value="True">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <l:InfoEditPanel Style="{DynamicResource InfoPaneStyle}"
                                                             DataContext="{Binding SelectedItem, Source={x:Static l:Global.Local}}"/>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding InfoEditMode, Source={x:Static l:Global.Local}}" Value="False">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <l:InfoPanel Style="{DynamicResource InfoPaneStyle}"
                                                         DataContext="{Binding SelectedItem, Source={x:Static l:Global.Local}}"/>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding ConfigVisible, Source={x:Static l:Global.Local}}" Value="True"/>
                                    <Condition Binding="{Binding ConfigWindow, Source={x:Static l:Global.User}}" Value="False"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <l:ConfigPanel Style="{DynamicResource InfoPaneStyle}"/>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Control.Style>

            </Control>
            
            <!-- Notifier -->

            <Popup x:Name="wxNotifier" Grid.ColumnSpan="3" Style="{DynamicResource NotifierStyle}">
                <Border x:Name="wxNotifierBorder" Grid.ColumnSpan="3">
                    <TextBlock x:Name="wxNotifierText" />
                </Border>
            </Popup>
            
        </Grid>
    </Border>
    
    
</Window>
