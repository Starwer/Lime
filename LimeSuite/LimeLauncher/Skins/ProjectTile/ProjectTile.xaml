<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:w="clr-namespace:WPFhelper;assembly=LimeLauncher"
                    xmlns:c="clr-namespace:LimeLauncher.Controls;assembly=LimeLauncher"
                    xmlns:d="clr-namespace:Thumbnail;assembly=LimeLauncher"
                    xmlns:l="clr-namespace:LimeLauncher;assembly=LimeLauncher"
                    xmlns:lime="clr-namespace:Lime;assembly=Lime"
                    xmlns:s="clr-namespace:System;assembly=mscorlib">


    <!-- **************************************************************************************************************** -->
    <!-- Metadata -->
    <!-- Enter here the information about you and this skin -->

    <s:Double x:Key="MetaLimeVersion">0.5</s:Double>
    <s:String x:Key="MetaAuthor">Sebastien Mouy (Starwer)</s:String>
    <s:String x:Key="MetaContact">starwer@laposte.net</s:String>
    <s:String x:Key="MetaWebsite">http://starwer.online.fr</s:String>
    <s:String x:Key="MetaDescription">Multimedia theme, designed for Home-Theater-PC. Default theme provided with LimeLauncher.</s:String>


    <!-- **************************************************************************************************************** -->
    <!-- Skin parameters -->
    <!-- Parameters that should be customizable directly in the LimeLauncher Settings -->

    <l:SkinParam x:Key="ParamLabelColors" Text="Colors"/>

    <l:SkinParam x:Key="ParamHeaderColor" Text="Header Font">
        <Color>#5050FF</Color>
    </l:SkinParam>

    <l:SkinParam x:Key="ParamIconFontColor" Text="Icon Font">
        <Color>#FFFFFF</Color>
    </l:SkinParam>

    <l:SkinParam x:Key="ParamFrontColor" Text="Foreground">
        <Color>#8080F0</Color>
    </l:SkinParam>
    <l:SkinParam x:Key="ParamBackgroundColor" Text="Background">
        <Color>#F00C0C0C</Color>
    </l:SkinParam>

    <l:SkinParam x:Key="ParamIconColor" Text="Icon Background">
        <Color>#8080A0</Color>
    </l:SkinParam>

    <l:SkinParam x:Key="ParamLabelFont" Text="Text"/>

    <l:SkinParam x:Key="ParamFont" Text="Font">
        <l:WPFfont />
    </l:SkinParam>

    <l:SkinParam x:Key="ParamFontWrap" Text="Name Wrapping">
        <TextWrapping>WrapWithOverflow</TextWrapping>
    </l:SkinParam>

    <l:SkinParam x:Key="ParamLabelSizes" Text="Sizes"/>

    <l:SkinParam x:Key="ParamFontSize" Text="Font" Minimum="8" Maximum="100">
        <w:DoubleScaled>16</w:DoubleScaled>
    </l:SkinParam>

    <l:SkinParam x:Key="ParamIconBigSize" Text="Big Icon">
        <w:DoubleScaled>128</w:DoubleScaled>
    </l:SkinParam>
    <l:SkinParam x:Key="ParamIconMediumSize" Text="Medium Icon" Minimum="8" Maximum="512">
        <w:DoubleScaled>40</w:DoubleScaled>
    </l:SkinParam>
    <l:SkinParam x:Key="ParamIconSmallSize" Text="Small Icon">
        <w:DoubleScaled>32</w:DoubleScaled>
    </l:SkinParam>
    <l:SkinParam x:Key="ParamButtonBigSize" Text="Button" Minimum="8" Maximum="512">
        <w:DoubleScaled>50</w:DoubleScaled>
    </l:SkinParam>

    <l:SkinParam x:Key="ParamScrollSize" Text="Scrollbar" Minimum="6" Maximum="100">
        <w:DoubleScaled>18</w:DoubleScaled>
    </l:SkinParam>

    <l:SkinParam x:Key="ParamNormalScreenBorder" Text="Window Border" Minimum="1" Maximum="100">
        <w:DoubleScaled>8</w:DoubleScaled>
    </l:SkinParam>

    <l:SkinParam x:Key="ParamWindowRadius" Text="Window radius" Minimum="0" Maximum="100">
        <w:DoubleScaled>10</w:DoubleScaled>
    </l:SkinParam>


    <!-- **************************************************************************************************************** -->
    <!-- Define value-converters -->

    <!-- UniversalValueConverter: Enable to convert from virtually any type to the target type -->
    <w:UniversalValueConverter x:Key="AutoConvert" />

    <!-- LowerThanConverter: Return true if the value is lower than the parameter. Both must be of type: double. -->
    <w:LowerThanConverter x:Key="LowerThanConvert" />

    <!-- ScaleConverter: Enable to multiply a double by a parameter value (default: Scale) -->
    <w:ScaleConverter x:Key="ScaleConvert" />

    <!-- ColorConverter: Enable to convert a color by multiplying it by another color -->
    <w:ColorConverter x:Key="ColorConverter" />

    <BooleanToVisibilityConverter x:Key="BoolToVisible" />


    <!-- **************************************************************************************************************** -->
    <!-- Derived objects declaration -->

    <SolidColorBrush x:Key="IconFontBrush" Color="{Binding Content, Source={StaticResource ParamIconFontColor}}" />

    <SolidColorBrush x:Key="HeaderBrush" Color="{Binding Content, Source={StaticResource ParamHeaderColor}}" />

    <SolidColorBrush x:Key="NormalBrush" Color="{Binding Content, Source={StaticResource ParamFrontColor}}" />


    <SolidColorBrush x:Key="IconBrush" Color="{Binding Content, Source={StaticResource ParamFrontColor}, Converter={StaticResource ColorConverter}, ConverterParameter=#6FFF}" />
    <SolidColorBrush x:Key="NormalBorderBrush" Color="{Binding Content, Source={StaticResource ParamFrontColor}, Converter={StaticResource ColorConverter}, ConverterParameter=#4FFF}" />
    <SolidColorBrush x:Key="GlyphBrush" Color="{Binding Content, Source={StaticResource ParamFrontColor}, Converter={StaticResource ColorConverter}, ConverterParameter=#808080}" />
    <SolidColorBrush x:Key="GlyphBrushUnselected" Color="{Binding Content, Source={StaticResource ParamFrontColor}, Converter={StaticResource ColorConverter}, ConverterParameter=#4E808080}" />
    <SolidColorBrush x:Key="PressedBrush" Color="{Binding Content, Source={StaticResource ParamFrontColor}, Converter={StaticResource ColorConverter}, ConverterParameter=#C0C0C0}" />
    <SolidColorBrush x:Key="BorderBrush" Color="{Binding Content, Source={StaticResource ParamFrontColor}, Converter={StaticResource ColorConverter}, ConverterParameter='sc#0.8 1.25 1.25 1.25'}" />

    <SolidColorBrush x:Key="ControlNormalBrush" Color="{Binding Content, Source={StaticResource ParamIconColor}, Converter={StaticResource ColorConverter}, ConverterParameter=#404040}" />
    <SolidColorBrush x:Key="ControlSelectedBrush" Color="{Binding Content, Source={StaticResource ParamIconColor}, Converter={StaticResource ColorConverter}, ConverterParameter='sc#1.0 2.0 2.0 2.0'}" />
    <SolidColorBrush x:Key="ButtonActivatedBrush" Color="{Binding Content, Source={StaticResource ParamIconColor}, Converter={StaticResource ColorConverter}, ConverterParameter=#6FFF}" />
    <SolidColorBrush x:Key="MenuBrush" Color="{Binding Content, Source={StaticResource ParamIconColor}, Converter={StaticResource ColorConverter}, ConverterParameter=#E8404040}" />

    <SolidColorBrush x:Key="BackgroundGradFromBrush" Color="{Binding Content, Source={StaticResource ParamBackgroundColor}, Converter={StaticResource ColorConverter}, ConverterParameter=#FFFF}" />
    <SolidColorBrush x:Key="BackgroundGradToBrush" Color="{Binding Content, Source={StaticResource ParamBackgroundColor}, Converter={StaticResource ColorConverter}, ConverterParameter=#FAAA}" />
    <SolidColorBrush x:Key="MarginBrush" Color="{Binding Content, Source={StaticResource ParamBackgroundColor}, Converter={StaticResource ColorConverter}, ConverterParameter=#DFFF}"/>


    <w:ThicknessScaled x:Key="ScrollPadding" Top="0" Bottom="0" 
                       Left="{Binding Content.Value, Source={StaticResource ParamButtonBigSize}}" 
                       Right="{Binding Content.Value, Source={StaticResource ParamButtonBigSize}}" />


    <!-- **************************************************************************************************************** -->
    <!-- Complete Visual tree hierarchy, 
         format: + Type                       : Key/Name    (Style)
              + Window 
                + Border                      : wxWinBorder (BackgroundStyle)
                  + Grid                      : wxMainGrid  (MainGridStyle)
                    + GridSplitter            : wxSplitter
                    + Button                  : wxBack      (NavigationBackButtonStyle)
                    + Button                  : wxNext      (NavigationNextButtonStyle)
                    + Border                  : wxNotifier  (NotifierStyle)
                      + TextBlock             : wxNotifierText
                    + InfoPanel               : wxInfoPane
                    + ScrollViewer            : wxScroll    (IconScrollViewerStyle)
                      + ItemsControl          : wxRoot
                        + StackPanel          : wxPanel     (IconPanelStyle)
                          + Grid              : wxHeader
                            + Image           : wxHeaderIcon
                            + TextBlock       : wxHeaderTitle 
                          + ItemsControl      : wxItemDataTemplate 
                            + Grid            : wxItemArea
                              + ToggleButton  : wxItem      (LimeItemButtonStyle)
                                + Grid        : wxItemGrid
                                  + Image     : wxIcon
                                  + Thumbnail : wxThumbnail
                                  + TextBlock : wxText 
        -->


    <!-- **************************************************************************************************************** -->
    <!-- Custom animations, triggered programmatically -->

    <w:DoubleScaled x:Key="PanelAnimScrollOffset">100</w:DoubleScaled>

    <!-- Triggered when request to go to the next panel (or new panel) starts -->
    <Storyboard x:Key="wxPanelNext_Enter">
        <DoubleAnimation Storyboard.TargetName="wxScroll" 
                         Storyboard.TargetProperty="(StackPanel.Opacity)" 
                         To="0" 
                         Duration="00:00:00.10"/>
        <DoubleAnimation Storyboard.TargetName="wxRoot" 
                         Storyboard.TargetProperty="RenderTransform.X" 
                         To="{Binding  Source={StaticResource PanelAnimScrollOffset}, Path=Scaled, Converter={StaticResource ScaleConvert}, ConverterParameter=-1}" 
                         Duration="00:00:00.10"/>
    </Storyboard>

    <!-- Triggered when request to go to the next panel (or new panel) has loaded the panel -->
    <Storyboard x:Key="wxPanelNext_Leave">
        <DoubleAnimation Storyboard.TargetName="wxScroll" 
                         Storyboard.TargetProperty="(StackPanel.Opacity)" 
                         To="1"  
                         Duration="00:00:00.10"/>
        <DoubleAnimation Storyboard.TargetName="wxRoot" 
                         Storyboard.TargetProperty="RenderTransform.X" 
                         From="{Binding  Source={StaticResource PanelAnimScrollOffset}, Path=Scaled}" 
                         To="0" 
                         Duration="00:00:00.10"/>
    </Storyboard>


    <!-- Triggered when request to go back to the previous panel (or new panel) starts -->
    <Storyboard x:Key="wxPanelPrev_Enter">
        <DoubleAnimation Storyboard.TargetName="wxScroll" 
                         Storyboard.TargetProperty="(StackPanel.Opacity)" 
                         To="0" 
                         Duration="00:00:00.10"/>
        <DoubleAnimation Storyboard.TargetName="wxRoot" 
                         Storyboard.TargetProperty="RenderTransform.X" 
                         To="{Binding  Source={StaticResource PanelAnimScrollOffset}, Path=Scaled}" 
                         Duration="00:00:00.10"/>
    </Storyboard>

    <!-- Triggered when request to go back to the previous panel has loaded the panel -->
    <Storyboard x:Key="wxPanelPrev_Leave">
        <DoubleAnimation Storyboard.TargetName="wxScroll" 
                         Storyboard.TargetProperty="(StackPanel.Opacity)" 
                         To="1"  
                         Duration="00:00:00.10"/>
        <DoubleAnimation Storyboard.TargetName="wxRoot" 
                         Storyboard.TargetProperty="RenderTransform.X" 
                         From="{Binding  Source={StaticResource PanelAnimScrollOffset}, Path=Scaled, Converter={StaticResource ScaleConvert}, ConverterParameter=-1}" 
                         To="0" 
                         Duration="00:00:00.10"/>
    </Storyboard>


    <!-- Triggered when hiding the launcher -->
    <Storyboard x:Key="wxWindow_hide">
        <DoubleAnimation Storyboard.TargetName="wxWinBorder" 
                         Storyboard.TargetProperty="Opacity" 
                         To="0"  
                         Duration="00:00:00.20"/>
    </Storyboard>


    <!-- Triggered when restoring the launcher -->
    <Storyboard x:Key="wxWindow_show">
        <DoubleAnimation Storyboard.TargetName="wxWinBorder" 
                         Storyboard.TargetProperty="Opacity" 
                         From="0" 
                         To="1"  
                         Duration="00:00:00.20"/>
    </Storyboard>


    <!-- **************************************************************************************************************** -->
    <!-- Generic Styles -->


    <Style TargetType="TextBox">
        <Setter Property="Margin" Value="{w:ThicknessScaled '2,0'}"/>
        <Setter Property="MinWidth" Value="{w:DoubleScaled 50}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Foreground" Value="{StaticResource IconFontBrush}"/>
        <Setter Property="CaretBrush" Value="{StaticResource IconFontBrush}"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Border Name="Border" CornerRadius="{w:DoubleScaled 2}" Padding="{w:ThicknessScaled 2}" BorderThickness="{w:ThicknessScaled 2}" 
                            Background="Transparent">
                        <Border.BorderBrush>
                            <!-- Create new SolidColorBrush instance to enable to animate its color property -->
                            <SolidColorBrush Color="{Binding Color, Source={StaticResource GlyphBrush}}"/>
                        </Border.BorderBrush>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.5" />
                                    <VisualTransition GeneratedDuration="0:0:0.2" To="Focused" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border" 
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" 
                                                         To="{Binding Color, Source={StaticResource ControlNormalBrush}}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Border" 
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0.3" />
                                        <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="Transparent" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="ReadOnly">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Border" 
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0.5" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Color, Source={StaticResource ButtonActivatedBrush}}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Color, Source={StaticResource ButtonActivatedBrush}}" />
                                        <ColorAnimation Storyboard.TargetName="Border"  Duration="0"
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" 
                                                        To="{Binding Color, Source={StaticResource ControlSelectedBrush}}" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="False">
                <Setter Property="Cursor" Value="Arrow"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ButtonBaseFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border x:Name="Border" CornerRadius="{w:DoubleScaled 2}" Background="#4FFF" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonBaseStyle" TargetType="ButtonBase">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Foreground" Value="{StaticResource IconFontBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonBaseFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <Border Name="Border" CornerRadius="{w:DoubleScaled 2}" Padding="{w:ThicknessScaled 2}" BorderThickness="{w:ThicknessScaled 2}" 
                            Background="Transparent">
                        <Border.BorderBrush>
                            <!-- Create new SolidColorBrush instance to enable to animate its color property -->
                            <SolidColorBrush Color="{Binding Color, Source={StaticResource GlyphBrush}}"/>
                        </Border.BorderBrush>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.5" />
                                    <VisualTransition GeneratedDuration="0:0:0.2" To="Checked" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border" 
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" 
                                                        To="{Binding Color, Source={StaticResource ControlNormalBrush}}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Border" 
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0.3" />
                                        <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="Transparent" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Color, Source={StaticResource ButtonActivatedBrush}}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Color, Source={StaticResource ButtonActivatedBrush}}" />
                                        <ColorAnimation Storyboard.TargetName="Border"  Duration="0"
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" 
                                                         To="{Binding Color, Source={StaticResource ControlSelectedBrush}}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Color, Source={StaticResource ButtonActivatedBrush}}" />
                                        <ColorAnimation Storyboard.TargetName="Border"  Duration="0"
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" 
                                                         To="{Binding Color, Source={StaticResource ControlSelectedBrush}}" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter RecognizesAccessKey="True"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="ToggleButton" BasedOn="{StaticResource ButtonBaseStyle}">
        <Setter Property="Margin" Value="{w:ThicknessScaled '2,0'}"/>
        <Setter Property="MinWidth" Value="{w:DoubleScaled 50}"/>
    </Style>

    <Style TargetType="Button" BasedOn="{StaticResource ButtonBaseStyle}">
    </Style>

    <Style TargetType="RepeatButton" BasedOn="{StaticResource ButtonBaseStyle}" >
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
  
     
    
    <Style TargetType="CheckBox">
        <Setter Property="Margin" Value="{w:ThicknessScaled '4,0'}" />
        <Setter Property="Foreground" Value="{StaticResource IconFontBrush}" />
        <Setter Property="FontFamily" Value="{Binding Content.Family, Source={StaticResource ParamFont}}" />
        <Setter Property="FontStyle" Value="{Binding Content.Style, Source={StaticResource ParamFont}}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent"
                                     VerticalAlignment="Center">
                        <BulletDecorator.Bullet>
                            <Border Name="Border" 
                                    CornerRadius="{w:DoubleScaled 2}" 
                                    Padding="{w:ThicknessScaled 2}" 
                                    BorderThickness="{w:ThicknessScaled 2}"
                                    Width="{Binding Content.Scaled, Source={StaticResource ParamFontSize}}" 
                                    Height="{Binding Content.Scaled, Source={StaticResource ParamFontSize}}">
                                <!-- Create new SolidColorBrush instances to enable to animate its color property -->
                                <Border.Background>
                                    <SolidColorBrush Color="{Binding Color, Source={StaticResource ControlNormalBrush}}"/>
                                </Border.Background>
                                <Border.BorderBrush>
                                    <SolidColorBrush Color="{Binding Color, Source={StaticResource GlyphBrush}}"/>
                                </Border.BorderBrush>
                                <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <!-- check mark [v] -->
                                    <Path x:Name="CheckMark"
                                          Opacity="0"
                                          Width="8" Height="8"
                                          SnapsToDevicePixels="True"
                                          StrokeThickness="2"
                                          Data="M 0 3 L 3 7 L 8 0">
                                        <Path.Stroke>
                                            <SolidColorBrush Color="{Binding Color, Source={StaticResource ControlSelectedBrush}}"/>
                                        </Path.Stroke>
                                    </Path>
                                    <!-- cross mark [x] -->
                                    <Path x:Name="IndeterminateMark"
                                          Opacity="0"
                                          Width="8" Height="8"
                                          SnapsToDevicePixels="True"
                                          StrokeThickness="2"
                                          Data="M 0 0 L 8 8 M 0 8 L 8 0">
                                        <Path.Stroke>
                                            <SolidColorBrush Color="{Binding Color, Source={StaticResource GlyphBrush}}"/>
                                        </Path.Stroke>
                                    </Path>
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.5" />
                                    <VisualTransition GeneratedDuration="0:0:0.2" To="Pressed" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                         To="0.3" />
                                        <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="Transparent" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Color, Source={StaticResource ButtonActivatedBrush}}" />
                                        <ColorAnimation Storyboard.TargetName="Border"  Duration="0"
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" 
                                                        To="{Binding Color, Source={StaticResource ControlSelectedBrush}}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Content, Source={StaticResource ParamIconColor}}" />
                                        <ColorAnimation Storyboard.TargetName="Border"  Duration="0"
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" 
                                                        To="{Binding Color, Source={StaticResource ControlSelectedBrush}}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Color, Source={StaticResource ButtonActivatedBrush}}" />
                                        <ColorAnimation Storyboard.TargetName="Border"  Duration="0"
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" 
                                                        To="{Binding Color, Source={StaticResource ControlSelectedBrush}}" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.2" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="CheckMark"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)" 
                                                         To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked" />
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="IndeterminateMark"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         To="1" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter Margin="{w:ThicknessScaled '4,0,0,0'}"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Left"
                                          RecognizesAccessKey="True" />
                    </BulletDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <Style TargetType="TextBlock">
                <Setter Property="Margin" Value="0"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
            </Style>
        </Style.Resources>
    </Style>


    <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Border x:Name="Border"
                CornerRadius="{w:DoubleScaled 2}"
                Background="Transparent">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal">
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetName="Border" 
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" 
                                                        To="Transparent" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Border" 
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0.3" />
                            <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="Transparent" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Color, Source={StaticResource ButtonActivatedBrush}}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Color, Source={StaticResource ButtonActivatedBrush}}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CheckStates">
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                           Storyboard.TargetName="CollapsedArrow">
                                <DiscreteObjectKeyFrame KeyTime="0"
                                      Value="{x:Static Visibility.Hidden}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                           Storyboard.TargetName="ExpandedArrow">
                                <DiscreteObjectKeyFrame KeyTime="0"
                                      Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unchecked" />
                    <VisualState x:Name="Indeterminate" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="{w:ThicknessScaled 1}"/>
                </Grid.ColumnDefinitions>
                
                <Path x:Name="CollapsedArrow" 
                      Margin="{w:ThicknessScaled 6}"
                      HorizontalAlignment="Center" VerticalAlignment="Center"
                      Data="M 0 0 L 4 4 L 8 0 Z">
                    <Path.Fill>
                        <SolidColorBrush Color="{Binding Color, Source={StaticResource IconFontBrush}}" />
                    </Path.Fill>
                </Path>
                <Path x:Name="ExpandedArrow"
                      Margin="{w:ThicknessScaled 6}"
                      HorizontalAlignment="Center" VerticalAlignment="Center"
                      Visibility="Collapsed"
                      Data="M 0 4 L 4 0 L 8 4 Z">
                    <Path.Fill>
                        <SolidColorBrush Color="{Binding Color, Source={StaticResource IconFontBrush}}" />
                    </Path.Fill>
                </Path>
                
                <ContentPresenter Grid.Column="1" 
                                  RecognizesAccessKey="True"/>
            </Grid>
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="OverflowToggleButton" TargetType="{x:Type ToggleButton}">
        <Border x:Name="Border"
                CornerRadius="{w:DoubleScaled 2}"
                Background="Transparent">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal">
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetName="Border" 
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" 
                                                        To="Transparent" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Border" 
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0.3" />
                            <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="Transparent" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Color, Source={StaticResource ButtonActivatedBrush}}" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Color, Source={StaticResource ButtonActivatedBrush}}" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CheckStates">
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                           Storyboard.TargetName="CollapsedArrow">
                                <DiscreteObjectKeyFrame KeyTime="0"
                                      Value="{x:Static Visibility.Hidden}" />
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                           Storyboard.TargetName="ExpandedArrow">
                                <DiscreteObjectKeyFrame KeyTime="0"
                                      Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unchecked" />
                    <VisualState x:Name="Indeterminate" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>

            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="{w:ThicknessScaled 1}"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="{w:ThicknessScaled 1}" />
                </Grid.RowDefinitions>

                <Path x:Name="CollapsedArrow" 
                      Grid.RowSpan="2" Grid.ColumnSpan="2"
                      Margin="{w:ThicknessScaled 6}"
                      HorizontalAlignment="Center" VerticalAlignment="Center"
                      Data="M 0 0 L 4 4 L 8 0 Z">
                    <Path.Fill>
                        <SolidColorBrush Color="{Binding Color, Source={StaticResource IconFontBrush}}" />
                    </Path.Fill>
                </Path>
                <Path x:Name="ExpandedArrow"
                      Grid.RowSpan="2" Grid.ColumnSpan="2"
                      Margin="{w:ThicknessScaled 6}"
                      HorizontalAlignment="Center" VerticalAlignment="Center"
                      Visibility="Collapsed"
                      Data="M 0 4 L 4 0 L 8 4 Z">
                    <Path.Fill>
                        <SolidColorBrush Color="{Binding Color, Source={StaticResource IconFontBrush}}" />
                    </Path.Fill>
                </Path>

                <ContentPresenter Grid.Row="1" Grid.Column="1" 
                                  RecognizesAccessKey="True"/>
            </Grid>
        </Border>
    </ControlTemplate>


    <Style TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{StaticResource IconFontBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition x:Name="ContentRow" />
                        </Grid.RowDefinitions>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="0.3" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Border" Grid.Row="0"
                                Background="Transparent">
                            <ToggleButton OverridesDefaultStyle="True"
                                          Template="{StaticResource ExpanderToggleButton}"
                                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <ContentPresenter Margin="{w:ThicknessScaled 4}"
                                                  ContentSource="Header"
                                                  RecognizesAccessKey="True" />
                            </ToggleButton>
                        </Border>
                        <Border x:Name="Content" Grid.Row="1"
                                Background="Transparent"
                                Visibility="Collapsed">
                            <ContentPresenter Margin="{w:ThicknessScaled 4}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="Content" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="ToolBarButtonBaseStyle" TargetType="ButtonBase">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Foreground" Value="{StaticResource IconFontBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonBaseFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <Border Name="Border" CornerRadius="{w:DoubleScaled 2}" Padding="{w:ThicknessScaled 2}" BorderThickness="{w:ThicknessScaled 2}" 
                            Background="Transparent">
                        <Border.BorderBrush>
                            <!-- Create new SolidColorBrush instance to enable to animate its color property -->
                            <SolidColorBrush Color="{Binding Color, Source={StaticResource GlyphBrush}}"/>
                        </Border.BorderBrush>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.5" />
                                    <VisualTransition GeneratedDuration="0:0:0.2" To="Checked" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border" 
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" 
                                                        To="{Binding Color, Source={StaticResource ControlNormalBrush}}" />
                                        <ColorAnimation Storyboard.TargetName="Border"  Duration="0"
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" 
                                                         To="Transparent" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Border" 
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0.3" />
                                        <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="Transparent" />
                                        <ColorAnimation Storyboard.TargetName="Border"  Duration="0"
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" 
                                                         To="Transparent" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Color, Source={StaticResource ButtonActivatedBrush}}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Color, Source={StaticResource ButtonActivatedBrush}}" />
                                        <ColorAnimation Storyboard.TargetName="Border"  Duration="0"
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" 
                                                         To="{Binding Color, Source={StaticResource ControlSelectedBrush}}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Color, Source={StaticResource ButtonActivatedBrush}}" />
                                        <ColorAnimation Storyboard.TargetName="Border"  Duration="0"
                                                        Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" 
                                                         To="{Binding Color, Source={StaticResource ControlSelectedBrush}}" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter RecognizesAccessKey="True"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static ToolBar.ButtonStyleKey}"
           BasedOn="{StaticResource ToolBarButtonBaseStyle}"
           TargetType="Button" />
    <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}"
           BasedOn="{StaticResource ToolBarButtonBaseStyle}"
           TargetType="ToggleButton" />
    <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}"
           BasedOn="{StaticResource ToolBarButtonBaseStyle}"
           TargetType="CheckBox" />
    <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}"
           BasedOn="{StaticResource ToolBarButtonBaseStyle}"
           TargetType="RadioButton" />

    <Style x:Key="{x:Static ToolBar.SeparatorStyleKey}" TargetType="Separator">
        <Setter Property="Background" Value="{StaticResource GlyphBrushUnselected}"/>
        <Setter Property="Margin" Value="{w:ThicknessScaled '5,0'}"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Border x:Name="Border"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        Background="{TemplateBinding Background}" 
                        Height="{w:DoubleScaled 24}" 
                        Width="{w:DoubleScaled 2}" 
                        SnapsToDevicePixels="true"/>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Orientation, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToolBar}}}" Value="Vertical">
                            <Setter Property="Margin" Value="{w:ThicknessScaled '0,5'}"/>
                            <Setter TargetName="Border" Property="Height" Value="{w:DoubleScaled 2}" />
                            <Setter TargetName="Border" Property="Width" Value="{w:DoubleScaled 24}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    <Style TargetType="ToolBar">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolBar">
                    <Border Name="Border" 
                            CornerRadius="{w:DoubleScaled 4}" 
                            BorderThickness="{w:ThicknessScaled 2}" 
                            Background="Transparent">
                        <Border.BorderBrush>
                            <!-- Create new SolidColorBrush instance to enable to animate its color property -->
                            <SolidColorBrush Color="{Binding Color, Source={StaticResource GlyphBrushUnselected}}"/>
                        </Border.BorderBrush>

                        <DockPanel>
                            <ToggleButton x:Name="OverflowButton"
                                          DockPanel.Dock="Right"
                                          MinWidth="{w:DoubleScaled 5}"
                                          MinHeight="{w:DoubleScaled 5}"
                                          Visibility="{TemplateBinding HasOverflowItems, Converter={StaticResource BoolToVisible}}"
                                          Template="{StaticResource OverflowToggleButton}"
                                          ClickMode="Press"
                                          IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, 
                                          RelativeSource={RelativeSource TemplatedParent}}">
                                <Popup x:Name="OverflowPopup"
                                       AllowsTransparency="true"
                                       Placement="Bottom"
                                       StaysOpen="false"
                                       Focusable="false"
                                       PopupAnimation="Slide"
                                       IsOpen="{Binding IsOverflowOpen, 
                                       RelativeSource={RelativeSource TemplatedParent}}">
                                    <Border Name="DropDownBorder" 
                                            CornerRadius="{w:DoubleScaled 2}" 
                                            BorderThickness="{w:ThicknessScaled 2}" >
                                        <Border.BorderBrush>
                                            <!-- Create new SolidColorBrush instance to enable to animate its color property -->
                                            <SolidColorBrush Color="{Binding Color, Source={StaticResource NormalBorderBrush}}"/>
                                        </Border.BorderBrush>
                                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel"
                                                              Margin="{w:ThicknessScaled 2}"
                                                              WrapWidth="{w:DoubleScaled 200}"
                                                              Focusable="true"
                                                              FocusVisualStyle="{x:Null}"
                                                              KeyboardNavigation.TabNavigation="Cycle"
                                                              KeyboardNavigation.DirectionalNavigation="Cycle" />
                                    </Border>
                                </Popup>
                            </ToggleButton>

                            <Thumb x:Name="ToolBarThumb" Width="10" />
                            <ToolBarPanel x:Name="PART_ToolBarPanel"
                                          IsItemsHost="true"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflowOpen" Value="true">
                            <Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="false" />
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="true">
                            <Setter TargetName="ToolBarThumb"
                                    Property="Visibility"
                                    Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter TargetName="OverflowButton" Property="DockPanel.Dock" Value="Bottom" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="ToolBarTray">
        <Setter Property="Background" Value="{x:Null}" />
    </Style>

    <Style TargetType="Popup">
        <Setter Property="Placement" Value="Bottom"/>
        <Setter Property="PopupAnimation" Value="Slide"/>
        <Setter Property="AllowsTransparency" Value="True"/>
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="BorderThickness" Value="{w:ThicknessScaled 2}"/>
                <Setter Property="CornerRadius" Value="{w:DoubleScaled 2}"/>
                <Setter Property="Padding" Value="{w:ThicknessScaled 4}"/>
                <Setter Property="Background" Value="{StaticResource MenuBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource ControlSelectedBrush}"/>
            </Style>
            <Style TargetType="ListBox">
                <Setter Property="Foreground" Value="{StaticResource IconFontBrush}" />
                <Setter Property="Background" Value="{StaticResource MenuBrush}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ListBox">
                            <Border>
                                <ScrollViewer>
                                    <StackPanel IsItemsHost="True" />
                                </ScrollViewer>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Resources>
                    <Style TargetType="Border">
                        <Setter Property="BorderThickness" Value="{w:ThicknessScaled 2}"/>
                        <Setter Property="CornerRadius" Value="{w:DoubleScaled 2}"/>
                        <Setter Property="Padding" Value="{w:ThicknessScaled '2,2,0,2'}"/>
                        <Setter Property="Background" Value="{StaticResource MenuBrush}"/>
                        <Setter Property="BorderBrush" Value="{StaticResource ControlSelectedBrush}"/>
                    </Style>
                </Style.Resources>
            </Style>
        </Style.Resources>
    </Style>


    <Style TargetType="ListBoxItem">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border Name="Border" BorderThickness="0" 
                            Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.5" />
                                    <VisualTransition GeneratedDuration="0:0:0.2" To="Pressed" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="Transparent" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Color, Source={StaticResource ButtonActivatedBrush}}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Content, Source={StaticResource ParamIconColor}}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Selected">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Color, Source={StaticResource ButtonActivatedBrush}}" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="GridSplitter">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="MinWidth" Value="{w:DoubleScaled 6}" />
        <Setter Property="MinHeight" Value="{w:DoubleScaled 6}" />
        <Setter Property="Margin" Value="{w:ThicknessScaled 1}" />
        <Setter Property="Background" Value="{StaticResource GlyphBrush}" />
        <Setter Property="Opacity" Value="0.2"/>
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="GridSplitter">
                    <Rectangle Fill="{TemplateBinding Background}"
                               RadiusX="{w:DoubleScaled 4}" RadiusY="{w:DoubleScaled 4}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.4" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.2" Duration="0:0:4" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding InfoEditMode, Source={x:Static l:Global.Local}}" Value="False" />
                    <Condition Binding="{Binding ConfigVisible, Source={x:Static l:Global.Local}}" Value="False" />
                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="Transparent"/>
            </MultiDataTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="Transparent"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="SliderTrack"  TargetType="RepeatButton">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Foreground" Value="{StaticResource IconFontBrush}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border Name="Border" Margin="{w:ThicknessScaled '1,4'}">
                        <Border.Background>
                            <SolidColorBrush Color="{Binding Background.Color, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type RepeatButton}}}"/>
                        </Border.Background>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.5" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Content, Source={StaticResource ParamIconColor}}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border" 
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Content, Source={StaticResource ParamIconColor}}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Border" 
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0.3" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ThumbBase" TargetType="Thumb">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Background" Value="{StaticResource GlyphBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource NormalBorderBrush}"/>
        <Setter Property="MinWidth" Value="{w:DoubleScaled 10}" />
        <Setter Property="MinHeight" Value="{w:DoubleScaled 10}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border x:Name="Border"
                            CornerRadius="{w:DoubleScaled 4}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{w:ThicknessScaled 1}" >
                        <Border.Background>
                            <SolidColorBrush Color="{Binding Background.Color, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Thumb}}}"/>
                        </Border.Background>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.5" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border"
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Color, Source={StaticResource NormalBrush}}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border" 
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Content, Source={StaticResource ParamIconColor}}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Border" 
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0.3" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Thumb" BasedOn="{StaticResource ThumbBase}" />


    <ControlTemplate x:Key="HorizontalSlider" TargetType="{x:Type Slider}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <TickBar x:Name="TopTick"
                     SnapsToDevicePixels="True"
                     Placement="Top"
                     Height="4"
                     Visibility="Collapsed">
                <TickBar.Fill>
                    <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                </TickBar.Fill>
            </TickBar>
            <Track Grid.Row="1" x:Name="PART_Track">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Command="Slider.DecreaseLarge"
                                  Background="{StaticResource GlyphBrush}"
                                  Style="{StaticResource SliderTrack}" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Height="{w:DoubleScaled 16}"/>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Command="Slider.IncreaseLarge" 
                                  Background="{StaticResource ButtonActivatedBrush}"
                                  Style="{StaticResource SliderTrack}" />
                </Track.IncreaseRepeatButton>
            </Track>
            <TickBar x:Name="BottomTick"
                        SnapsToDevicePixels="True"
                        Grid.Row="2"
                        Fill="{TemplateBinding Foreground}"
                        Placement="Bottom"
                        Height="4"
                        Visibility="Collapsed" />
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter TargetName="TopTick" Property="Visibility"  Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter TargetName="TopTick" Property="Visibility" Value="Visible" />
                <Setter TargetName="BottomTick" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="Slider">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template" Value="{StaticResource HorizontalSlider}" />
    </Style>


    <Style TargetType="Image">
        <Setter Property="Opacity" Value="0"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="{x:Type w:WaitRotatingDots}">
        <Setter Property="w:WaitRotatingDots.Foreground" Value="{StaticResource NormalBrush}"/>
        <Setter Property="w:WaitRotatingDots.Background" Value="Transparent" />
    </Style>


    <Style x:Key="LimeControlHeaderTextStyle" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Margin" Value="{w:ThicknessScaled '1,5,6,0'}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.2" Duration="0:0:1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LimeControlStyle" TargetType="{x:Type c:LimeControl}">
        <Setter Property="Margin" Value="{w:ThicknessScaled '5,1'}"/>
        <Style.Resources>
            <Style TargetType="TextBlock">
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Margin" Value="{w:ThicknessScaled '1,0,5,0'}"/>
            </Style>
        </Style.Resources>
    </Style>


    <Style TargetType="{x:Type c:LimeTextBox}" BasedOn="{StaticResource LimeControlStyle}">
    </Style>

    <Style TargetType="{x:Type c:LimeDropDown}" BasedOn="{StaticResource LimeControlStyle}">
    </Style>

    <Style TargetType="{x:Type c:LimeListView}" BasedOn="{StaticResource LimeControlStyle}">
    </Style>

    <Style TargetType="{x:Type c:LimeNumBox}" BasedOn="{StaticResource LimeControlStyle}">
    </Style>

    <Style TargetType="{x:Type c:LimePersonCtrl}" BasedOn="{StaticResource LimeControlStyle}">
        <Style.Resources>
            <Style TargetType="TextBlock">
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Margin" Value="{w:ThicknessScaled '7,2'}"/>
            </Style>
        </Style.Resources>
    </Style>

    <Style TargetType="{x:Type c:LimeLabel}">
        <Style.Resources>
            <Style TargetType="{x:Type Border}">
                <Setter Property="Background" Value="Transparent" />
                <Style.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="Margin" Value="{w:ThicknessScaled '0,8,2,1'}"/>
                        <Setter Property="FontWeight" Value="Bold"/>
                        <Setter Property="FontSize" Value="{Binding Content.Scaled, Source={StaticResource ParamFontSize}, Converter={StaticResource ScaleConvert}, ConverterParameter=1.1}"/>
                        <Setter Property="Foreground" Value="{StaticResource HeaderBrush}"/>
                    </Style>
                </Style.Resources>
            </Style>
        </Style.Resources>
    </Style>

    <Style TargetType="{x:Type c:LimeColorPicker}" BasedOn="{StaticResource LimeControlStyle}">
        <Style.Resources>
            <Style x:Key="LimeColorPickerColumnStyle" TargetType="ColumnDefinition">
                <Setter Property="MaxWidth" Value="{w:DoubleScaled 100}"/>
            </Style>
            <Style TargetType="Rectangle">
                <Setter Property="Margin" Value="{w:ThicknessScaled '2,1,5,1'}"/>
                <Setter Property="Stroke" Value="{StaticResource NormalBorderBrush}"/>
            </Style>
        </Style.Resources>
    </Style>

    <Style TargetType="{x:Type c:LimeComposite}" BasedOn="{StaticResource LimeControlStyle}">
        <Style.Resources>
            <Style TargetType="{x:Type c:LimeControl}">
                <Setter Property="HeaderEnabled" Value="False"/>
            </Style>
            <Style TargetType="{x:Type ItemsControl}">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <WrapPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
    </Style>

    <Style TargetType="{x:Type c:LimeButton}" BasedOn="{StaticResource LimeControlStyle}">
        <Setter Property="Margin" Value="{w:ThicknessScaled '2,0'}"/>
        <Setter Property="MinWidth" Value="{w:DoubleScaled 50}"/>
        <Style.Resources>
            <Style TargetType="{x:Type c:LimeIcon}">
                <Setter Property="Margin" Value="{w:ThicknessScaled '3,2,6,2'}"/>
                <Setter Property="Foreground" Value="{StaticResource IconBrush}"/>
                <Setter Property="Background" Value="Transparent"/>
            </Style>
        </Style.Resources>
    </Style>

    <Style TargetType="{x:Type c:LimeCheckBox}">
        <Setter Property="Margin" Value="{w:ThicknessScaled '1,4,0,0'}"/>
    </Style>

    <Style TargetType="{x:Type c:LimeIcon}">
        <Setter Property="Margin" Value="{w:ThicknessScaled '2'}"/>
        <Setter Property="Foreground" Value="{StaticResource IconBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style TargetType="{x:Type c:LimeImage}">
        <Style.Resources>
            <Style TargetType="TextBlock">
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="TextAlignment" Value="Center"/>
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="TextAlignment" Value="Center"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect
                          ShadowDepth="{w:DoubleScaled '3'}"
                          Color="Black"
                          Opacity="0.9"
                          BlurRadius="{w:DoubleScaled '3'}" />
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.3"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Hyperlink">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{StaticResource NormalBrush}"/>
        <Setter Property="TextDecorations" Value="{x:Null}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource ControlSelectedBrush}"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="{StaticResource ButtonActivatedBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource ControlSelectedBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- **************************************************************************************************************** -->
    <!-- InfoPane Styles -->

    <Style x:Key="InfoPaneStyle" TargetType="UserControl">
        <Style.Resources>
            <Style TargetType="ScrollViewer">
                <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
                <Setter Property="Padding" Value="{w:ThicknessScaled '5,0,6,6'}" />
            </Style>
            <Style TargetType="TextBlock">
                <Setter Property="TextTrimming" Value="WordEllipsis"/>
                <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="ConfigPanelListBoxStyle" TargetType="ListBox">
        <Setter Property="Margin" Value="{w:ThicknessScaled '6,3,6,3'}"/>
        <Setter Property="Foreground" Value="{StaticResource IconFontBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0"/>
    </Style>

    <Style x:Key="ConfigPanelBorderStyle" TargetType="Border">
        <Setter Property="Margin" Value="{w:ThicknessScaled '0'}"/>
        <Setter Property="Padding" Value="{w:ThicknessScaled '6,0,0,3'}"/>
        <Setter Property="BorderThickness" Value="{w:ThicknessScaled '3,0,0,3'}"/>
        <Setter Property="BorderBrush" Value="{StaticResource GlyphBrushUnselected}"/>
    </Style>

    <Style x:Key="ConfigPanelBottomBarBorderStyle" TargetType="Border">
        <Setter Property="Margin" Value="{w:ThicknessScaled '8'}"/>
    </Style>

    <Style x:Key="OpusTextStyle" TargetType="TextBlock">
        <Setter Property="Margin" Value="{w:ThicknessScaled '7,2'}"/>
        <Setter Property="TextTrimming" Value="WordEllipsis"/>
        <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
        <Setter Property="LineHeight" Value="{Binding Source={StaticResource ParamFontSize}, Path=Content.Scaled, Converter={StaticResource ScaleConvert}, ConverterParameter=1.1}" />
        <Setter Property="MaxHeight" Value="{Binding Source={StaticResource ParamFontSize}, Path=Content.Scaled, Converter={StaticResource ScaleConvert}, ConverterParameter=2.4}" />
    </Style>


    <Style x:Key="PersonButtonStyle" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <ContentPresenter RecognizesAccessKey="True"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="PersonTextStyle" TargetType="TextBlock">
        <Setter Property="Margin" Value="{w:ThicknessScaled '5,0'}" />
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="TextTrimming" Value="WordEllipsis"/>
        <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
    </Style>


    <Style x:Key="RoleTextStyle" TargetType="TextBlock">
        <Setter Property="Margin" Value="{w:ThicknessScaled '5,0'}" />
        <Setter Property="Opacity" Value="0.7" />
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="TextTrimming" Value="WordEllipsis"/>
        <Setter Property="TextWrapping" Value="WrapWithOverflow"/>
        <Setter Property="FontStyle" Value="Italic"/>
    </Style>

    <Style x:Key="OrigTitleTextStyle" TargetType="TextBlock">
        <Setter Property="Opacity" Value="0.7" />
        <Setter Property="FontStyle" Value="Italic"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
        <Setter Property="LineStackingStrategy" Value="BlockLineHeight" />
    </Style>


    <!-- **************************************************************************************************************** -->
    <!-- Notifier -->
    <!--  + Window 
            + Border : BackgroundStyle
              + Grid : MainGridStyle 
                * Border : NotifierStyle
                  + TextBlock
    -->

    <Style x:Key="NotifierStyle" TargetType="Popup">
        <Setter Property="PopupAnimation" Value="Slide" />
        <Setter Property="Placement" Value="Center" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Style.Resources>
            <Style TargetType="Border">
                <Setter Property="Margin" Value="{w:ThicknessScaled 4}"/>
                <Setter Property="BorderThickness" Value="{w:ThicknessScaled 1}"/>
                <Setter Property="CornerRadius" Value="{w:DoubleScaled 3}" />
                <Setter Property="BorderBrush" Value="{StaticResource IconFontBrush}"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.8,1">
                            <GradientStop Color="{Binding Color, Source={StaticResource BackgroundGradFromBrush}}" Offset="0"/>
                            <GradientStop Color="{Binding Color, Source={StaticResource BackgroundGradToBrush}}" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect/>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="TextBlock">
                <Setter Property="Foreground" Value="{StaticResource IconFontBrush}"/>
                <Setter Property="Margin" Value="{w:ThicknessScaled '10,5'}" />
                <Setter Property="FontFamily" Value="{Binding Content.Family, Source={StaticResource ParamFont}}" />
                <Setter Property="FontStyle" Value="{Binding Content.Style, Source={StaticResource ParamFont}}" />
                <Setter Property="FontWeight" Value="Bold" />
                <Setter Property="FontSize" Value="{Binding Content.Scaled, Source={StaticResource ParamFontSize}}"/>
                <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
                <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
                <Setter Property="TextWrapping" Value="WrapWithOverflow" />
                <Setter Property="TextTrimming" Value="WordEllipsis"/>
            </Style>
        </Style.Resources>
    </Style>


    <!-- **************************************************************************************************************** -->
    <!-- Containers, Panels hierarchy -->

    <!--  Style of the Window  (and default inheritance values) -->
    <!--  * Window 
    -->

    <Style TargetType="Window">
        <Setter Property="Foreground" Value="{StaticResource IconFontBrush}" />
        <Setter Property="FontFamily" Value="{Binding Content.Family, Source={StaticResource ParamFont}}" />
        <Setter Property="FontStyle" Value="{Binding Content.Style, Source={StaticResource ParamFont}}" />
        <Setter Property="FontWeight" Value="{Binding Content.Weight, Source={StaticResource ParamFont}}" />
        <Setter Property="FontSize" Value="{Binding Content.Scaled, Source={StaticResource ParamFontSize}}"/>
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Style.Resources>

            <Style TargetType="ToolTip">
                <Style.Resources>
                    <Style TargetType="ContentPresenter">
                        <Style.Resources>
                            <Style TargetType="TextBlock">
                                <Setter Property="TextWrapping" Value="Wrap" />
                            </Style>
                        </Style.Resources>
                    </Style>
                </Style.Resources>
                <Setter Property="MaxWidth" Value="{Binding Content.Scaled, Source={StaticResource ParamIconBigSize}, Converter={StaticResource ScaleConvert}, ConverterParameter=4}"/>
                <Setter Property="ToolTipService.Placement" Value="Bottom" />
                <Setter Property="Foreground" Value="{StaticResource IconFontBrush}"/>
                <Setter Property="Background">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.8,1" StartPoint="0.5,0">
                            <GradientStop Color="{Binding Color, Source={StaticResource BackgroundGradFromBrush}}" Offset="0"/>
                            <GradientStop Color="{Binding Color, Source={StaticResource BackgroundGradToBrush}}" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="FontFamily" Value="{Binding Content.Family, Source={StaticResource ParamFont}}" />
                <Setter Property="FontStyle" Value="{Binding Content.Style, Source={StaticResource ParamFont}}" />
                <Setter Property="FontWeight" Value="{Binding Content.Weight, Source={StaticResource ParamFont}}" />
                <Setter Property="FontSize" Value="{Binding Content.Scaled, Source={StaticResource ParamFontSize}}"/>
                <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
                <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
            </Style>

            <Style TargetType="TextBlock">
                <Setter Property="Foreground" Value="{StaticResource IconFontBrush}"/>
                <Setter Property="Margin" Value="{w:ThicknessScaled 2}"/>
                <Setter Property="MinWidth" Value="{w:DoubleScaled 50}"/>
                <Setter Property="FontFamily" Value="{Binding Content.Family, Source={StaticResource ParamFont}}" />
                <Setter Property="FontStyle" Value="{Binding Content.Style, Source={StaticResource ParamFont}}" />
                <Setter Property="FontWeight" Value="{Binding Content.Weight, Source={StaticResource ParamFont}}" />
                <Setter Property="FontSize" Value="{Binding Content.Scaled, Source={StaticResource ParamFontSize}}"/>
                <Setter Property="SnapsToDevicePixels" Value="True"/>
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.3"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            
        </Style.Resources>
        <Style.Triggers>
            <DataTrigger Binding="{Binding  Content.Scaled, Source={StaticResource ParamFontSize}, Converter={StaticResource LowerThanConvert}, ConverterParameter=14}" Value="True">
                <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <!-- Window Border/Background -->
    <!--  + Window 
            * Border : BackgroundStyle 
    -->
    <Style x:Key="BackgroundStyle" TargetType="Border">
        <Setter Property="CornerRadius" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Opacity" Value="1"/>
        <Setter Property="Border.Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <GradientStop Color="{Binding Color, Source={StaticResource BackgroundGradFromBrush}}" Offset="0"/>
                    <GradientStop Color="{Binding Color, Source={StaticResource BackgroundGradToBrush}}" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding  RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=WindowStyle}" Value="None" />
                    <Condition Binding="{Binding  RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=WindowState}" Value="Normal"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="CornerRadius" Value="{Binding Content.Scaled, Source={StaticResource ParamWindowRadius}}" />
                <Setter Property="BorderThickness" Value="{Binding Content.Scaled, Source={StaticResource ParamNormalScreenBorder}, Converter={StaticResource AutoConvert}}" />
                <Setter Property="Border.BorderBrush" Value="{StaticResource BorderBrush}"/>
            </MultiDataTrigger>
            <MultiDataTrigger >
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding  RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=WindowStyle}" Value="None" />
                    <Condition Binding="{Binding  RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Path=WindowState}" Value="Maximized"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="CornerRadius" Value="0" />
                <Setter Property="BorderThickness" Value="{Binding Source={x:Static l:Global.Local}, Path=FullScreenBorderSize, Converter={StaticResource AutoConvert}}" />
                <Setter Property="Border.BorderBrush" Value="{StaticResource MarginBrush}" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>


    <!-- Main Grid -->
    <!--  + Window 
            + Border : BackgroundStyle 
              * Grid : MainGridStyle 
    -->
    <Style x:Key="MainGridStyle" TargetType="Grid">
        <Setter Property="Panel.ZIndex" Value="-1" />
    </Style>


    <!-- Main Container of the Icon-Panels: ScrollViewer -->
    <!--  + Window 
            + Border : BackgroundStyle
              + Grid : MainGridStyle 
                + Button : NavigationBackButtonStyle
                + Button : NavigationNextButtonStyle
                * ScrollViewer : IconScrollViewerStyle
                  + ItemsControl
    -->
    <Style x:Key="IconScrollViewerStyle" TargetType="ScrollViewer">
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Margin" Value="0"/>
        <!-- As the Navigaton buttons Next is overlayed in this container, 
            a margin should be kept on right to display these properly -->
        <Setter Property="Padding" Value="{Binding Scaled, Source={StaticResource ScrollPadding}}"/>

        <Style.Resources>
            <!--  Panel Icon container definition  -->
            <Style TargetType="ItemsControl">
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <TranslateTransform/>
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemsControl.ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <!-- Type of container for presenting the Icon-Panels -->
                            <StackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding ListView, Source={x:Static l:Global.Local}}" Value="True">
                        <Setter Property="HorizontalAlignment" Value="Stretch" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>


    <!-- Icon-Panel: Contains the Title of a LimeItem Directory and its content (Icons/tasks) -->
    <!--  + Window 
            + Border : BackgroundStyle
              + Grid : MainGridStyle 
                + ScrollViewer : IconScrollViewerStyle
                  + ItemsControl
                    * StackPanel : IconPanelStyle
                      + StackPanel    (Panel Header)
                        + Image       (Panel Icon)
                        + TextBlock   (Panel Title)
                      + ItemsControl  (Panel Icons)
    -->

    <w:ThicknessScaled x:Key="IconPanelImageMargin">10,8,10,0</w:ThicknessScaled>
    <w:ThicknessScaled x:Key="IconPanelMargin">5,0,5,5</w:ThicknessScaled>

    <Style x:Key="IconPanelStyle" TargetType="StackPanel">
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled"/>
        <Style.Resources>
            <!--  Panel Icon  -->
            <Style TargetType="Image">
                <Setter Property="Margin" Value="{Binding Scaled, Source={StaticResource IconPanelImageMargin}}"/>
                <Setter Property="Height" Value="{Binding Content.Scaled, Source={StaticResource ParamIconMediumSize}}"/>
                <Setter Property="Stretch" Value="Uniform" />
            </Style>

            <!--  Panel Title  -->
            <Style TargetType="TextBlock">
                <Setter Property="Visibility" Value="Visible"/>
                <Setter Property="Margin" Value="{w:ThicknessScaled '0,2'}"/>
                <!-- Set Value="Collapse" to Hide the panel title -->
                <Setter Property="TextTrimming" Value="WordEllipsis"/>
                <Setter Property="VerticalAlignment" Value="Bottom" />
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="FontSize" Value="{Binding Content.Scaled, Source={StaticResource ParamFontSize}, Converter={StaticResource ScaleConvert}, ConverterParameter=1.5}"/>
                <Setter Property="Foreground" Value="{StaticResource HeaderBrush}"/>
            </Style>

            <!--  Panel Icon container definition  -->
            <Style TargetType="ItemsControl">
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="Margin" Value="{Binding Scaled, Source={StaticResource IconPanelMargin}}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding ListView, Source={x:Static l:Global.Local}}" Value="False">
                        <!-- Icon view -->
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                        <Setter Property="ItemsControl.ItemsPanel">
                            <Setter.Value>
                                <ItemsPanelTemplate>
                                    <WrapPanel/>
                                </ItemsPanelTemplate>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
    </Style>


    <!-- **************************************************************************************************************** -->
    <!-- Focused element visual decoration -->

    <w:ThicknessScaled x:Key="ButtonIconMargin">5</w:ThicknessScaled>
    <w:ThicknessScaled x:Key="ButtonIconMarginListView">1</w:ThicknessScaled>
    <w:DoubleScaled x:Key="ButtonFocusVisualBorderRadius">15</w:DoubleScaled>
    <w:DoubleScaled x:Key="ButtonFocusVisualBlurRadius">20</w:DoubleScaled>


    <Style x:Key="ButtonFocusVisual">

        <!-- Disable if not in keyboard mode -->
        <Style.Triggers>
            <DataTrigger Binding="{Binding Source={x:Static l:Global.Local}, Path=CtrlMode}" Value="{x:Static lime:CtrlMode.Mouse}">
                <Setter Property="Control.Template" Value="{x:Null}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Source={x:Static l:Global.Local}, Path=CtrlMode}" Value="{x:Static lime:CtrlMode.Touch}">
                <Setter Property="Control.Template" Value="{x:Null}" />
            </DataTrigger>
        </Style.Triggers>

        <!-- Settings if in keyboard mode -->
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <!-- Glow Effect by Starwer -->
                    <Border x:Name="Border" BorderThickness="{Binding Scaled, Source={StaticResource ButtonIconMargin}}" CornerRadius="{Binding Scaled, Source={StaticResource ButtonFocusVisualBorderRadius}}" BorderBrush="White">
                        <Border.Effect>
                            <BlurEffect KernelType="Gaussian" Radius="{Binding Scaled, Source={StaticResource ButtonFocusVisualBlurRadius}}"/>
                        </Border.Effect>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- **************************************************************************************************************** -->
    <!-- LimeItem Button : Represents the icons/thumbnails -->
    <!--  + Window 
            + Border : BackgroundStyle
              + Grid : MainGridStyle 
                + ScrollViewer : IconScrollViewerStyle
                  + ItemsControl
                    + StackPanel : IconPanelStyle
                      + ItemsControl
                        * ToggleButton : LimeItemButtonStyle
                          + Grid            
                            + Image                         (Icon)
                            + Thumbnail                     (Task thumbnail)
                            + TextBlock                     (Name)
    -->

    <w:ThicknessScaled x:Key="ButtonMargin">2</w:ThicknessScaled>
    <w:DoubleScaled x:Key="ButtonRadius">10</w:DoubleScaled>


    <!-- Basis button Button Style (To be inherited) -->
    <Style x:Key="BigButtonBaseStyle" TargetType="ToggleButton">
        <!-- DropShadow causes blurry text ! :  http://www.cplotts.com/2009/02/25/gpu-effects-blurry-text/ -->
        <!--<Setter Property="Effect" >
            <Setter.Value>
                <DropShadowEffect/>
            </Setter.Value>
        </Setter>-->
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Foreground" Value="{StaticResource IconFontBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border x:Name="Border" 
                            TextBlock.Foreground="{TemplateBinding Foreground}"
                            BorderThickness="{Binding Scaled, Source={StaticResource ButtonIconMargin}}" 
                            CornerRadius="{Binding Scaled, Source={StaticResource ButtonRadius}}" 
                            BorderBrush="Transparent">
                        <Border.Background>
                            <SolidColorBrush Color="{Binding Color, Source={StaticResource ControlNormalBrush}}" />
                        </Border.Background>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.5" />
                                    <VisualTransition GeneratedDuration="0:0:0.2" To="Checked" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border" 
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Content, Source={StaticResource ParamIconColor}}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border" 
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="{Binding Content, Source={StaticResource ParamIconColor}}" />
                                        <ColorAnimation Storyboard.TargetName="Border" 
                                                        Storyboard.TargetProperty="(BorderBrush).(SolidColorBrush.Color)" 
                                                        To="{Binding Color, Source={StaticResource ControlSelectedBrush}}" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="Border" 
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)"
                                                        To="Transparent" />
                                        <DoubleAnimation Storyboard.TargetName="Border" 
                                                         Storyboard.TargetProperty="(Panel.Opacity)"
                                                         To="0.2" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsPressed" Value="True">
                            <Setter Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX=".9" ScaleY=".9"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="RenderTransformOrigin" Value=".5,.5"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding ListView, Source={x:Static l:Global.Local}}" Value="True">
                            <Setter TargetName="Border" Property="BorderThickness" Value="{Binding Scaled, Source={StaticResource ButtonIconMarginListView}}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Metadata Search Button Style -->
    <Style x:Key="MetadataSearchButtonStyle" TargetType="ToggleButton" BasedOn="{StaticResource BigButtonBaseStyle}">
        <Style.Resources>
            <Style TargetType="Image">
                <Setter Property="Margin" Value="{w:ThicknessScaled '2,1,4,1'}"/>
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Stretch" Value="Uniform" />
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.2" Duration="0:0:0.2"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="TextBlock">
                <Setter Property="Padding" Value="0"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="TextWrapping" Value="NoWrap"/>
                <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                <Setter Property="LineStackingStrategy" Value="BlockLineHeight" />
            </Style>
            <Style TargetType="{x:Type w:WaitRotatingDots}">
                <Setter Property="w:WaitRotatingDots.Foreground" Value="{StaticResource IconFontBrush}"/>
                <Setter Property="w:WaitRotatingDots.Background" Value="Transparent" />
            </Style>
        </Style.Resources>
    </Style>

    <!-- LimeItem Button Style -->
    <Style x:Key="LimeItemButtonStyle" TargetType="ToggleButton" BasedOn="{StaticResource BigButtonBaseStyle}">
        <Style.Resources>
            <Style TargetType="Grid">
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="MinWidth" Value="{Binding Source={StaticResource ParamFontSize}, Path=Content.Scaled, Converter={StaticResource ScaleConvert}, ConverterParameter=10}" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding ListView, Source={x:Static l:Global.Local}}" Value="False">
                        <Setter Property="Width" Value="{Binding Source={StaticResource ParamIconBigSize}, Path=Content.Scaled, Converter={StaticResource ScaleConvert}, ConverterParameter=1.05}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="RowDefinition">
                <!-- Define the bottom row size, where the small icon should fit -->
                <Setter Property="Height" Value="{Binding Content.Scaled, Source={StaticResource ParamIconSmallSize}, Converter={StaticResource ScaleConvert}, ConverterParameter=1.2}"/>
            </Style>
            <Style TargetType="ColumnDefinition">
                <!-- Define the left column size, where the small icon should fit -->
                <Setter Property="Width" Value="{Binding Content.Scaled, Source={StaticResource ParamIconSmallSize}, Converter={StaticResource ScaleConvert}, ConverterParameter=1.2}"/>
            </Style>
            <Style TargetType="d:Thumbnail">
                <Setter Property="Width" Value="{Binding Content.Scaled, Source={StaticResource ParamIconBigSize}}"/>
                <Setter Property="Height" Value="{Binding Content.Scaled, Source={StaticResource ParamIconBigSize}}"/>
            </Style>
            <Style TargetType="Image">
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Stretch" Value="Uniform" />
                <Style.Triggers>
                    <Trigger Property="Visibility" Value="Visible">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="TextBlock">
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="TextTrimming" Value="WordEllipsis"/>
                <Setter Property="TextWrapping" Value="{Binding Content, Source={StaticResource ParamFontWrap}}"/>
                <Setter Property="LineStackingStrategy" Value="BlockLineHeight" />
                <Setter Property="MaxWidth" Value="{Binding ElementName=wxButtonGrid, Path=ActualWidth}" />
                <Setter Property="LineHeight" Value="{Binding Source={StaticResource ParamFontSize}, Path=Content.Scaled, Converter={StaticResource ScaleConvert}, ConverterParameter=1.1}" />
                <Setter Property="MaxHeight" Value="{Binding Source={StaticResource ParamFontSize}, Path=Content.Scaled, Converter={StaticResource ScaleConvert}, ConverterParameter=4.4}" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding ListView, Source={x:Static l:Global.Local}}" Value="True">
                        <Setter Property="TextWrapping" Value="NoWrap"/>
                        <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="{x:Type w:WaitRotatingDots}">
                <Setter Property="w:WaitRotatingDots.Foreground" Value="{StaticResource IconFontBrush}"/>
                <Setter Property="w:WaitRotatingDots.Background" Value="Transparent" />
            </Style>
        </Style.Resources>
    </Style>



    <!-- **************************************************************************************************************** -->
    <!-- Navigation Buttons -->
    <!--  + Window 
            + Border : BackgroundStyle
              + Grid : MainGridStyle 
                * Button : NavigationBackButtonStyle  (Go back to previous directory)
                * Button : NavigationNextButtonStyle  (Go to next directory)
    -->

    <!-- Navigation Buttons Style -->
    <Style x:Key="NavigationButtonStyle" TargetType="ButtonBase">
        <Style.Resources>
            <Style TargetType="Image">
                <!-- Format button image -->
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Stretch" Value="None" />
                <Setter Property="Effect" >
                    <Setter.Value>
                        <DropShadowEffect x:Name="wxEffect"/>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
        <Setter Property="Foreground" Value="{StaticResource IconFontBrush}" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button" >
                    <Border x:Name="Border" 
                            TextBlock.Foreground="{TemplateBinding Foreground}" 
                            BorderThickness="{Binding Scaled, Source={StaticResource ButtonMargin}}" 
                            CornerRadius="{Binding Scaled, Source={StaticResource ButtonRadius}}" 
                            BorderBrush="Transparent">
                        <Border.Background>
                            <SolidColorBrush Color="Transparent" />
                        </Border.Background>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.5" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" >
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Border"
                                                         Storyboard.TargetProperty="(Panel.Opacity)"
                                                         To="0.6" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Border"
                                                         Storyboard.TargetProperty="(Panel.Opacity)"
                                                         To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="Border"
                                                         Storyboard.TargetProperty="(Panel.Opacity)"
                                                         To="1" />
                                        <ColorAnimation Storyboard.TargetName="Border" 
                                                        Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" 
                                                        To="{Binding Color, Source={StaticResource ButtonActivatedBrush}}" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter HorizontalAlignment="Center" 
                                          VerticalAlignment="Bottom" 
                                          RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsPressed" Value="True">
                            <Setter Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX=".9" ScaleY=".9"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="RenderTransformOrigin" Value=".5,.5"/>
                        </Trigger>
                        <Trigger Property="Button.IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Navigation Back Button -->

    <Style x:Key="NavigationBackButtonStyle" BasedOn="{StaticResource NavigationButtonStyle}" TargetType="Button">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="{w:ThicknessScaled '7,0,0,0'}"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Image Height="{Binding Content.Scaled, Source={StaticResource ParamButtonBigSize}}" 
                           Stretch="Uniform" 
                           Source="pack://siteoforigin:,,,/Skins/ProjectTile/Arrow Left white.png" 
                           RenderTransformOrigin="0.5,0.5"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="BackButtonStyle" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="Button">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Path Fill="{StaticResource IconFontBrush}" Data="M 6 0 L 6 12 L 0 6 Z"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- Browser ToolGrid -->

    <Style x:Key="BrowserToolGridStyle" TargetType="Grid">
        <Setter Property="Margin" Value="{w:ThicknessScaled '1'}"/>
    </Style>

    <Style x:Key="BrowserToolBarStyle" TargetType="{x:Type c:LimeToolBar}">
        <Setter Property="HorizontalAlignment" Value="Right" />
    </Style>

    <!-- Navigation Next Button -->

    <Style x:Key="NavigationNextButtonStyle" BasedOn="{StaticResource NavigationButtonStyle}" TargetType="Button">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Image Height="{Binding Content.Scaled, Source={StaticResource ParamButtonBigSize}}" 
                           Stretch="Uniform" 
                           Source="pack://siteoforigin:,,,/Skins/ProjectTile/Arrow Left white.png" 
                           RenderTransformOrigin="0.5,0.5">
                        <!-- flip image vertically -->
                        <Image.LayoutTransform>
                            <ScaleTransform ScaleY="1" ScaleX="-1"/>
                        </Image.LayoutTransform>
                    </Image>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="NextButtonStyle" BasedOn="{StaticResource ButtonBaseStyle}" TargetType="Button">
        <Setter Property="Margin" Value="0"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Path Fill="{StaticResource IconFontBrush}" Data="M 0 0 L 6 6 L 0 12 Z"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!-- **************************************************************************************************************** -->
    <!-- ScrollBars -->

    <!-- Special Thanks to Sacha Barber for his article:
             http://www.codeproject.com/Articles/37366/Styling-A-ScrollViewer-Scrollbar-In-WPF
         See also: 
             http://msdn2.microsoft.com/en-us/library/aa970847(VS.85).aspx
             http://msdn2.microsoft.com/en-us/library/ms742173(VS.85).aspx
         -->

    <w:DoubleScaled x:Key="ScrollRadius">4</w:DoubleScaled>
    <w:ThicknessScaled x:Key="ScrollMargin">1</w:ThicknessScaled>
    <w:ThicknessScaled x:Key="ScrollMarginNOver" 
                       Top="{Binding Content.Value, Source={StaticResource ParamScrollSize}, Converter={StaticResource ScaleConvert}, ConverterParameter=0.2}" 
                       Bottom="{Binding Content.Value, Source={StaticResource ParamScrollSize}, Converter={StaticResource ScaleConvert}, ConverterParameter=0.2}" 
                       Left="{Binding Content.Value, Source={StaticResource ParamScrollSize}, Converter={StaticResource ScaleConvert}, ConverterParameter=0.2}" 
                       Right="{Binding Content.Value, Source={StaticResource ParamScrollSize}, Converter={StaticResource ScaleConvert}, ConverterParameter=0.2}" />



    <!-- SrollViewer ScrollBar Repeat Buttons (at each end) -->
    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Opacity" Value="0" />
        <Setter Property="Visibility" Value="Collapsed" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Name="Border" Margin="{Binding Scaled, Source={StaticResource ScrollMargin}}" CornerRadius="{Binding Scaled, Source={StaticResource ScrollRadius}}" Background="{StaticResource NormalBrush}" BorderBrush="{StaticResource NormalBorderBrush}" BorderThickness="1">
                        <Path HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{StaticResource GlyphBrush}" Data="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollBar}}}" Value="True">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>

                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>

                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.5" To="1" Duration="0:0:0.5" />

                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.3" Duration="0:0:0.5" />

                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.5" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- SrollViewer ScrollBar Repeat Buttons (The part in the middle, not the thumb the long area between the buttons ) -->
    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ScrollViewer ScrollBar Thumb, that part that can be dragged up/down or left/right Buttons -->
    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}" BasedOn="{StaticResource ThumbBase}">
        <Setter Property="Margin" Value="{Binding Scaled, Source={StaticResource ScrollMarginNOver}}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollBar}}}" Value="True">
                <Setter Property="Margin" Value="{Binding Scaled, Source={StaticResource ScrollMargin}}"/>
                <Setter Property="Background" Value="{StaticResource NormalBrush}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- ScrollViewer Border Style -->
    <Style x:Key="ScrollBorder" TargetType="{x:Type Border}">
        <Setter Property="CornerRadius" Value="{Binding Scaled, Source={StaticResource ScrollRadius}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="{Binding Scaled, Source={StaticResource ScrollMargin}}" />
        <Setter Property="BorderBrush" Value="{StaticResource NormalBorderBrush}" />
        <Setter Property="Opacity" Value="0" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollBar}}}" Value="True">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.5" To="1" Duration="0:0:0.4" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:4" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="VerticalScrollBarNorm" TargetType="{x:Type ScrollBar}">
        <Grid >
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Border Grid.RowSpan="3" Style="{StaticResource ScrollBorder}" />
            <RepeatButton  Grid.Row="0" Style="{StaticResource ScrollBarLineButton}" 
                           Height="{Binding Content.Scaled, Source={StaticResource ParamScrollSize}}" 
                           Command="ScrollBar.LineUpCommand" Content="M 0 4 L 8 4 L 4 0 Z" />
            <Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                <Track.Resources>
                    <!-- Thumb's minimum height is half of this metric -->
                    <s:Double x:Key="{x:Static SystemParameters.VerticalScrollBarButtonHeightKey}">32</s:Double>
                </Track.Resources>
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Row="3" Style="{StaticResource ScrollBarLineButton}" 
                          Height="{Binding Content.Scaled, Source={StaticResource ParamScrollSize}}" 
                          Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z"/>
        </Grid>
    </ControlTemplate>

    <!-- HorizontalScrollBar Template using the previously created Templates -->
    <ControlTemplate x:Key="HorizontalScrollBarNorm" TargetType="{x:Type ScrollBar}">
        <Grid Name="scrollUi">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="1*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Border Grid.RowSpan="3" Style="{StaticResource ScrollBorder}" />
            <RepeatButton Grid.Column="0" Style="{StaticResource ScrollBarLineButton}" 
                          Width="{Binding Content.Scaled, Source={StaticResource ParamScrollSize}}" 
                          Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" />
            <Track Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                <Track.Resources>
                    <!-- Thumb's minimum width is half of this metric -->
                    <s:Double x:Key="{x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}">32</s:Double>
                </Track.Resources>
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton   Grid.Column="3" Style="{StaticResource ScrollBarLineButton}" 
                            Width="{Binding Content.Scaled, Source={StaticResource ParamScrollSize}}" 
                            Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z"/>
        </Grid>
    </ControlTemplate>


    <!-- Style for overall  ScrollBar -->
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="{Binding Content.Scaled, Source={StaticResource ParamScrollSize}}" />
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBarNorm}" />
            </Trigger>

            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="{Binding Content.Scaled, Source={StaticResource ParamScrollSize}}"/>
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{StaticResource VerticalScrollBarNorm}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Visibility" Value="Hidden"/>
            </Trigger>
        </Style.Triggers>
    </Style>


</ResourceDictionary>